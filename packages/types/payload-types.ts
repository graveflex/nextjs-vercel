/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * The pages that will be linked in this section will not have a dropdown
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FlatMenu".
 */
export type FlatMenu =
  | {
      link?: PayLoadLink;
      id?: string | null;
    }[]
  | null;
/**
 * Nav Items that are only displayed with an icon
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IconNavItems".
 */
export type IconNavItems =
  | {
      href?: string | null;
      newTab?: boolean | null;
      icon?: IconSelect;
      id?: string | null;
    }[]
  | null;

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    pages: Page;
    posts: Post;
    authors: Author;
    tags: Tag;
    files: File;
    images: Image;
    videos: Video;
    users: User;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    authors: AuthorsSelect<false> | AuthorsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    files: FilesSelect<false> | FilesSelect<true>;
    images: ImagesSelect<false> | ImagesSelect<true>;
    videos: VideosSelect<false> | VideosSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    nav: Nav;
    'four-oh-four': FourOhFour;
    homepage: Homepage;
    blogIndex: BlogIndex;
  };
  globalsSelect: {
    nav: NavSelect<false> | NavSelect<true>;
    'four-oh-four': FourOhFourSelect<false> | FourOhFourSelect<true>;
    homepage: HomepageSelect<false> | HomepageSelect<true>;
    blogIndex: BlogIndexSelect<false> | BlogIndexSelect<true>;
  };
  locale: 'en-US' | 'es-US';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  blocks?:
    | (
        | CtaSectionsT
        | IframeBlockT
        | IconGridBlockT
        | FullBleedImageBlockT
        | SectionHeaderBlockT
        | GalleryGridBlockT
        | VideoBlockT
        | FormBlockT
        | CardGridBlockT
        | MarkdownBlockT
        | FAQBlockT
        | TextImageBlockT
        | HeroBlockT
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Image;
    keywords?: string | null;
  };
  pageTitle: string;
  /**
   * Will be auto-generated to title if left blank.
   */
  slug?: string | null;
  theme?: ('light' | 'dark') | null;
  /**
   * If the current time is before this date, the page will not render
   */
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CtaSectionsT".
 */
export interface CtaSectionsT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  title?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'ctaSections';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: number;
  alt?: string | null;
  imageProps?: {
    priority?: boolean | null;
    quality?: number | null;
  };
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    blur?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    mobile?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    desktop?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    ultrawide?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IframeBlockT".
 */
export interface IframeBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  title?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  iframe: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'iframeBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IconGridBlockT".
 */
export interface IconGridBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  layout?: ('horizontal' | 'vertical') | null;
  items?:
    | {
        image: number | Image;
        content: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        cta?: CTAType;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'iconGridBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTAType".
 */
export interface CTAType {
  link?: PayLoadLink;
  /**
   * Variant Style of button - reference Button component in storybook
   */
  variant?: ('outline' | 'solid' | 'link') | null;
  /**
   * Theme styles of button - defaults to Block Theme if not set
   */
  color?: ('lightTheme' | 'darkTheme' | 'contrast') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payLoadLink".
 */
export interface PayLoadLink {
  type?: ('internal' | 'external' | 'email' | 'phone' | 'file') | null;
  label?: string | null;
  /**
   * Route for link
   */
  internalHref?: (number | null) | Page;
  /**
   * Route for link
   */
  externalHref?: string | null;
  /**
   * will open the default email client with this email address as the recipient
   */
  emailHref?: string | null;
  /**
   * Do no include spaces or special characters
   */
  phoneHref?: string | null;
  fileHref?: (number | null) | File;
  newTab?: boolean | null;
  icon?: IconSelect;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "files".
 */
export interface File {
  id: number;
  title: string;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IconSelect".
 */
export interface IconSelect {
  name?:
    | (
        | 'Hamburger'
        | 'Check'
        | 'ArrowUp'
        | 'ArrowLeft'
        | 'ArrowRight'
        | 'ArrowDown'
        | 'CaretDown'
        | 'CaretUp'
        | 'CaretRight'
        | 'CaretLeft'
        | 'Close'
        | 'DoubleCaretDown'
        | 'DoubleCaretUp'
        | 'DoubleCaretRight'
        | 'DoubleCaretLeft'
        | 'Error'
        | 'LinkOut'
        | 'MinusSign'
        | 'Person'
        | 'PlusSign'
        | 'Quote'
        | 'Search'
        | 'SolidArrowDown'
        | 'SolidArrowUp'
        | 'SolidArrowRight'
        | 'SolidArrowLeft'
        | 'ArrowNesting'
      )
    | null;
  /**
   * Icon height/width in pixels - x-large is default.
   */
  size?: ('35' | '30' | '25' | '20') | null;
  color?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FullBleedImageBlockT".
 */
export interface FullBleedImageBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  image: number | Image;
  mobileImage?: (number | null) | Image;
  /**
   * Controls the overlap of blocks. If checked, make sure that this block has the bottom padding unset and the block below it has the top padding unset.
   */
  isBackground?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'fullBleedImageBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SectionHeaderBlockT".
 */
export interface SectionHeaderBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  eyebrow?: string | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  alignment?: ('center' | 'left' | 'right') | null;
  cta?: CTAType;
  id?: string | null;
  blockName?: string | null;
  blockType: 'sectionHeaderBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryGridBlockT".
 */
export interface GalleryGridBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  galleryImages?:
    | {
        image?: (number | null) | Image;
        id?: string | null;
      }[]
    | null;
  cta?: CTAType;
  id?: string | null;
  blockName?: string | null;
  blockType: 'galleryGridBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlockT".
 */
export interface VideoBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  video?: (number | null) | Video;
  /**
   * A direct link to a video file, to be used for videos larger than 4.5MB
   */
  videoURL?: string | null;
  /**
   * A URL from a video hosting service like YouTube or Vimeo
   */
  embedURL?: string | null;
  /**
   * Optional caption will display below the video
   */
  caption?: string | null;
  /**
   * Makes video taller & overflow off page on mobile. Also hides video controls.
   */
  fullBleedMobile?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'videoBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos".
 */
export interface Video {
  id: number;
  title?: string | null;
  description?: string | null;
  publishedDate?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlockT".
 */
export interface FormBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  form: number | Form;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardGridBlockT".
 */
export interface CardGridBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  cards?:
    | {
        card: CardType;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cardGridBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardType".
 */
export interface CardType {
  /**
   * The image that will be displayed at the top of the card.
   */
  image?: (number | null) | Image;
  eyebrow?: string | null;
  /**
   * The main headline of the card.
   */
  headline: string;
  /**
   * The subhead of the card.
   */
  subHead?: string | null;
  /**
   * The date to be shown on the card.
   */
  date?: string | null;
  /**
   * The call to actions that appear at the bottom of the card. Be mindful of text length.
   */
  ctas?:
    | {
        cta?: CTAType;
        id?: string | null;
      }[]
    | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MarkdownBlockT".
 */
export interface MarkdownBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  /**
   * The content that will be displayed in the markdown block.
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * The maximum width of the content block.
   */
  maxWidth?: ('1440px' | '1280px' | '992px' | '768px' | '576px' | '320px' | 'unset') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'markdownBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlockT".
 */
export interface FAQBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  /**
   * Header & subtitle content for FAQ Block.
   */
  header?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * The alignment of the Header text
   */
  textAlignment?: ('left' | 'center' | 'right') | null;
  items?:
    | {
        /**
         * The text that will be displayed in the accordion item.
         */
        title?: string | null;
        /**
         * The content that will be displayed when the accordion item is expanded.
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'faqBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextImageBlockT".
 */
export interface TextImageBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  /**
   * Select the layout of the block
   */
  layout?: ('imgRight' | 'imgLeft') | null;
  /**
   * The image that will be displayed in its selected position.
   */
  image?: (number | null) | Image;
  /**
   * If a video is uploaded, the image will not be displayed.
   */
  video?: (number | null) | Video;
  /**
   * The content that will be displayed in the block.
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  items?:
    | {
        cta?: CTAType;
        id?: string | null;
      }[]
    | null;
  form?: {
    textinput?: TextInputType;
    cta?: CTAType;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'textImageBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextInputType".
 */
export interface TextInputType {
  /**
   * The unique name that serves as the ID for the input.
   */
  name?: string | null;
  placeholder?: string | null;
  helpText?: string | null;
  label?: string | null;
  required?: boolean | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlockT".
 */
export interface HeroBlockT {
  blockConfig?: {
    theme?: ('_' | 'light' | 'dark') | null;
    backgroundColor?: ('fg' | 'neutral' | 'blue' | 'indigo' | 'purple') | null;
    backgroundImage?: (number | null) | Image;
    /**
     * Block will not appear on page
     */
    hidden?: boolean | null;
    contentWidth?: ('full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs') | null;
    p?: {
      xs?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      md?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      lg?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
      xl?: {
        paddingTop?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
        paddingBottom?: ('9.375rem' | '7.5rem' | '3.75rem' | '2.25rem' | '1.125rem' | 'unset') | null;
      };
    };
  };
  /**
   * Set Fill to true to make the image full-bleed
   */
  image?: (number | null) | Image;
  eyebrow?: string | null;
  layout?: ('contentRight' | 'contentLeft' | 'contentCenter') | null;
  /**
   * If copy flows from left, right, or center.
   */
  contentAlign?: ('right' | 'left' | 'center') | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  form?: {
    textinput?: TextInputType;
    cta?: CTAType;
  };
  cta?: CTAType;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  subTitle?: string | null;
  date: string;
  authors?: (number | Author)[] | null;
  tags?: (number | Tag)[] | null;
  ctas?:
    | {
        cta?: CTAType;
        id?: string | null;
      }[]
    | null;
  thumbnail: number | Image;
  coverImage: number | Image;
  content: {
    /**
     * The content that will be displayed in the markdown block.
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    id?: string | null;
  }[];
  /**
   * pathname for the blog deatail - do not inculde /.
   */
  slug?: string | null;
  /**
   * If the current time is before this date, the page will not render
   */
  publishedAt?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Image;
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors".
 */
export interface Author {
  id: number;
  slug?: string | null;
  fullName: string;
  image?: (number | null) | Image;
  jobTitle: string;
  bio?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  label: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'authors';
        value: number | Author;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'files';
        value: number | File;
      } | null)
    | ({
        relationTo: 'images';
        value: number | Image;
      } | null)
    | ({
        relationTo: 'videos';
        value: number | Video;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  blocks?:
    | T
    | {
        ctaSections?: T | CtaSectionsTSelect<T>;
        iframeBlock?: T | IframeBlockTSelect<T>;
        iconGridBlock?: T | IconGridBlockTSelect<T>;
        fullBleedImageBlock?: T | FullBleedImageBlockTSelect<T>;
        sectionHeaderBlock?: T | SectionHeaderBlockTSelect<T>;
        galleryGridBlock?: T | GalleryGridBlockTSelect<T>;
        videoBlock?: T | VideoBlockTSelect<T>;
        formBlock?: T | FormBlockTSelect<T>;
        cardGridBlock?: T | CardGridBlockTSelect<T>;
        markdownBlock?: T | MarkdownBlockTSelect<T>;
        faqBlock?: T | FAQBlockTSelect<T>;
        textImageBlock?: T | TextImageBlockTSelect<T>;
        heroBlock?: T | HeroBlockTSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        keywords?: T;
      };
  pageTitle?: T;
  slug?: T;
  theme?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CtaSectionsT_select".
 */
export interface CtaSectionsTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  title?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IframeBlockT_select".
 */
export interface IframeBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  title?: T;
  iframe?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IconGridBlockT_select".
 */
export interface IconGridBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  layout?: T;
  items?:
    | T
    | {
        image?: T;
        content?: T;
        cta?: T | CTATypeSelect<T>;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTAType_select".
 */
export interface CTATypeSelect<T extends boolean = true> {
  link?: T | PayLoadLinkSelect<T>;
  variant?: T;
  color?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payLoadLink_select".
 */
export interface PayLoadLinkSelect<T extends boolean = true> {
  type?: T;
  label?: T;
  internalHref?: T;
  externalHref?: T;
  emailHref?: T;
  phoneHref?: T;
  fileHref?: T;
  newTab?: T;
  icon?: T | IconSelectSelect<T>;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IconSelect_select".
 */
export interface IconSelectSelect<T extends boolean = true> {
  name?: T;
  size?: T;
  color?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FullBleedImageBlockT_select".
 */
export interface FullBleedImageBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  image?: T;
  mobileImage?: T;
  isBackground?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SectionHeaderBlockT_select".
 */
export interface SectionHeaderBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  eyebrow?: T;
  content?: T;
  alignment?: T;
  cta?: T | CTATypeSelect<T>;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryGridBlockT_select".
 */
export interface GalleryGridBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  galleryImages?:
    | T
    | {
        image?: T;
        id?: T;
      };
  cta?: T | CTATypeSelect<T>;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlockT_select".
 */
export interface VideoBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  video?: T;
  videoURL?: T;
  embedURL?: T;
  caption?: T;
  fullBleedMobile?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlockT_select".
 */
export interface FormBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  content?: T;
  form?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardGridBlockT_select".
 */
export interface CardGridBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  cards?:
    | T
    | {
        card?: T | CardTypeSelect<T>;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardType_select".
 */
export interface CardTypeSelect<T extends boolean = true> {
  image?: T;
  eyebrow?: T;
  headline?: T;
  subHead?: T;
  date?: T;
  ctas?:
    | T
    | {
        cta?: T | CTATypeSelect<T>;
        id?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MarkdownBlockT_select".
 */
export interface MarkdownBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  content?: T;
  maxWidth?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlockT_select".
 */
export interface FAQBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  header?: T;
  textAlignment?: T;
  items?:
    | T
    | {
        title?: T;
        content?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextImageBlockT_select".
 */
export interface TextImageBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  layout?: T;
  image?: T;
  video?: T;
  content?: T;
  items?:
    | T
    | {
        cta?: T | CTATypeSelect<T>;
        id?: T;
      };
  form?:
    | T
    | {
        textinput?: T | TextInputTypeSelect<T>;
        cta?: T | CTATypeSelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextInputType_select".
 */
export interface TextInputTypeSelect<T extends boolean = true> {
  name?: T;
  placeholder?: T;
  helpText?: T;
  label?: T;
  required?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlockT_select".
 */
export interface HeroBlockTSelect<T extends boolean = true> {
  blockConfig?:
    | T
    | {
        theme?: T;
        backgroundColor?: T;
        backgroundImage?: T;
        hidden?: T;
        contentWidth?: T;
        p?:
          | T
          | {
              xs?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              md?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              lg?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
              xl?:
                | T
                | {
                    paddingTop?: T;
                    paddingBottom?: T;
                  };
            };
      };
  image?: T;
  eyebrow?: T;
  layout?: T;
  contentAlign?: T;
  content?: T;
  form?:
    | T
    | {
        textinput?: T | TextInputTypeSelect<T>;
        cta?: T | CTATypeSelect<T>;
      };
  cta?: T | CTATypeSelect<T>;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  subTitle?: T;
  date?: T;
  authors?: T;
  tags?: T;
  ctas?:
    | T
    | {
        cta?: T | CTATypeSelect<T>;
        id?: T;
      };
  thumbnail?: T;
  coverImage?: T;
  content?:
    | T
    | {
        content?: T;
        id?: T;
      };
  slug?: T;
  publishedAt?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors_select".
 */
export interface AuthorsSelect<T extends boolean = true> {
  slug?: T;
  fullName?: T;
  image?: T;
  jobTitle?: T;
  bio?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  label?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "files_select".
 */
export interface FilesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  alt?: T;
  imageProps?:
    | T
    | {
        priority?: T;
        quality?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        blur?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        mobile?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        desktop?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        ultrawide?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos_select".
 */
export interface VideosSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  publishedDate?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nav".
 */
export interface Nav {
  id: number;
  header?: {
    /**
     * Logo for header. Prefer `.svg`
     */
    logo?: (number | null) | Image;
    banner?: BannerContent;
    collapsibleMenu?: CollapsibleMenu;
    flatMenu?: FlatMenu;
    iconItems?: IconNavItems;
    hasCta?: boolean | null;
    /**
     * Call to Action Button
     */
    ctaButton?: {
      cta?: CTAType;
    };
  };
  footer?: {
    footerItems?: FooterItems;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerContent".
 */
export interface BannerContent {
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  background?: ('white' | 'black' | 'gray') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CollapsibleMenu".
 */
export interface CollapsibleMenu {
  sections?:
    | {
        /**
         * Label for menu item
         */
        label: string;
        /**
         * The pages that will be linked in this section
         */
        links?:
          | {
              link?: PayLoadLink;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FooterItems".
 */
export interface FooterItems {
  /**
   * Logo for footer. Prefer `.svg`
   */
  footerLogo?: (number | null) | Image;
  copyright?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  legalDisclaimer?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  footerMenu?: FlatMenu;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "four-oh-four".
 */
export interface FourOhFour {
  id: number;
  /**
   * The content that will be displayed in the markdown block.
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage".
 */
export interface Homepage {
  id: number;
  blocks?:
    | (
        | CtaSectionsT
        | IframeBlockT
        | IconGridBlockT
        | FullBleedImageBlockT
        | SectionHeaderBlockT
        | GalleryGridBlockT
        | VideoBlockT
        | FormBlockT
        | CardGridBlockT
        | MarkdownBlockT
        | FAQBlockT
        | TextImageBlockT
        | HeroBlockT
      )[]
    | null;
  pageTitle: string;
  slug?: string | null;
  theme?: ('light' | 'dark') | null;
  /**
   * If the current time is before this date, the page will not render
   */
  publishedAt?: string | null;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogIndex".
 */
export interface BlogIndex {
  id: number;
  blocks?:
    | (
        | CtaSectionsT
        | IframeBlockT
        | IconGridBlockT
        | FullBleedImageBlockT
        | SectionHeaderBlockT
        | GalleryGridBlockT
        | VideoBlockT
        | FormBlockT
        | CardGridBlockT
        | MarkdownBlockT
        | FAQBlockT
        | TextImageBlockT
        | HeroBlockT
      )[]
    | null;
  pageTitle: string;
  slug?: string | null;
  theme?: ('light' | 'dark') | null;
  /**
   * If the current time is before this date, the page will not render
   */
  publishedAt?: string | null;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nav_select".
 */
export interface NavSelect<T extends boolean = true> {
  header?:
    | T
    | {
        logo?: T;
        banner?: T | BannerContentSelect<T>;
        collapsibleMenu?: T | CollapsibleMenuSelect<T>;
        flatMenu?: T | FlatMenuSelect<T>;
        iconItems?: T | IconNavItemsSelect<T>;
        hasCta?: T;
        ctaButton?:
          | T
          | {
              cta?: T | CTATypeSelect<T>;
            };
      };
  footer?:
    | T
    | {
        footerItems?: T | FooterItemsSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerContent_select".
 */
export interface BannerContentSelect<T extends boolean = true> {
  content?: T;
  background?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CollapsibleMenu_select".
 */
export interface CollapsibleMenuSelect<T extends boolean = true> {
  sections?:
    | T
    | {
        label?: T;
        links?:
          | T
          | {
              link?: T | PayLoadLinkSelect<T>;
              id?: T;
            };
        id?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FlatMenu_select".
 */
export interface FlatMenuSelect<T extends boolean = true> {
  link?: T | PayLoadLinkSelect<T>;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IconNavItems_select".
 */
export interface IconNavItemsSelect<T extends boolean = true> {
  href?: T;
  newTab?: T;
  icon?: T | IconSelectSelect<T>;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FooterItems_select".
 */
export interface FooterItemsSelect<T extends boolean = true> {
  footerLogo?: T;
  copyright?: T;
  legalDisclaimer?: T;
  footerMenu?: T | FlatMenuSelect<T>;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "four-oh-four_select".
 */
export interface FourOhFourSelect<T extends boolean = true> {
  content?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage_select".
 */
export interface HomepageSelect<T extends boolean = true> {
  blocks?:
    | T
    | {
        ctaSections?: T | CtaSectionsTSelect<T>;
        iframeBlock?: T | IframeBlockTSelect<T>;
        iconGridBlock?: T | IconGridBlockTSelect<T>;
        fullBleedImageBlock?: T | FullBleedImageBlockTSelect<T>;
        sectionHeaderBlock?: T | SectionHeaderBlockTSelect<T>;
        galleryGridBlock?: T | GalleryGridBlockTSelect<T>;
        videoBlock?: T | VideoBlockTSelect<T>;
        formBlock?: T | FormBlockTSelect<T>;
        cardGridBlock?: T | CardGridBlockTSelect<T>;
        markdownBlock?: T | MarkdownBlockTSelect<T>;
        faqBlock?: T | FAQBlockTSelect<T>;
        textImageBlock?: T | TextImageBlockTSelect<T>;
        heroBlock?: T | HeroBlockTSelect<T>;
      };
  pageTitle?: T;
  slug?: T;
  theme?: T;
  publishedAt?: T;
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogIndex_select".
 */
export interface BlogIndexSelect<T extends boolean = true> {
  blocks?:
    | T
    | {
        ctaSections?: T | CtaSectionsTSelect<T>;
        iframeBlock?: T | IframeBlockTSelect<T>;
        iconGridBlock?: T | IconGridBlockTSelect<T>;
        fullBleedImageBlock?: T | FullBleedImageBlockTSelect<T>;
        sectionHeaderBlock?: T | SectionHeaderBlockTSelect<T>;
        galleryGridBlock?: T | GalleryGridBlockTSelect<T>;
        videoBlock?: T | VideoBlockTSelect<T>;
        formBlock?: T | FormBlockTSelect<T>;
        cardGridBlock?: T | CardGridBlockTSelect<T>;
        markdownBlock?: T | MarkdownBlockTSelect<T>;
        faqBlock?: T | FAQBlockTSelect<T>;
        textImageBlock?: T | TextImageBlockTSelect<T>;
        heroBlock?: T | HeroBlockTSelect<T>;
      };
  pageTitle?: T;
  slug?: T;
  theme?: T;
  publishedAt?: T;
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}