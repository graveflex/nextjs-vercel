name: Deploy Preview

on: [pull_request]

env:
  NEON_DATABASE_USERNAME: ${{ secrets.NEON_DATABASE_USERNAME }} # change this to your database username
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for commenting on pull requests for private repos
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }} # You can generate a an API key in your account settings
  NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }} # You can find this in your project settings
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_CI }}
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: Graveflex
  TURBO_REMOTE_ONLY: true
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build_app:
    uses: ./.github/workflows/build.yaml
    secrets: inherit
  deploy-preview:
    permissions: write-all
    needs: build_app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Cache turbo build setup
        uses: actions/cache/restore@v4
        with:
          path: |
            .env.local
            .vercel
            apps/web/.next
          key: ${{ runner.os }}-vercel-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vercel-

      - name: Cache storybook build
        uses: actions/cache@v4
        with:
          path: |
            .vercel/output/static/stories
          key: ${{ runner.os }}-stories-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-stories-

      - name: Get the Commit Author Name
        run: |
          echo "AUTHOR_NAME=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV

      - name: Set Commit SHA as an environment variable
        run: echo "COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Get Neon branch URLs
        id: create_branch
        uses: neondatabase/create-branch-action@v4
        with:
          project_id: ${{ env.NEON_PROJECT_ID }}
          # parent: dev # optional (defaults to your primary branch)
          branch_name: ${{ needs.build_app.outputs.neon_branch }}
          username: ${{ env.NEON_DATABASE_USERNAME }}
          api_key: ${{ env.NEON_API_KEY }}

      - name: Deploy Preview to Vercel
        id: deploy
        env:
          VERCEL_GIT_COMMIT_REF: ${{ steps.branch-name.outputs.current_branch }}
          SERVER_URL: ${{ needs.build_app.outputs.vercel_domain }}
        run: |
          db_url="${{ steps.create_branch.outputs.db_url_with_pooler }}?sslmode=require"
          db_url_unpooled="${{ steps.create_branch.outputs.db_url }}?sslmode=require"
          branch_name="${{ steps.branch-name.outputs.current_branch }}"
          commit_sha="${{ env.COMMIT_SHA }}"
          pr_id="${{ github.event.number }}"
          pr_domain=${{ needs.build_app.outputs.vercel_domain }}
          author_name="${{ env.AUTHOR_NAME }}"
          commit_message="$(git log -1 --pretty=format:'%s' $commit_sha)"
          gh_username="${{ github.actor }}"
          token="${{ env.VERCEL_TOKEN }}"
          preview_url=$(vercel deploy \
            --prebuilt \
            --token="$token" \
            --scope=graveflex \
            --target preview \
            --yes \
            -e DATABASE_URL="$db_url" \
            -b DATABASE_URL="$db_url" \
            -e SERVER_URL="$pr_domain" \
            -b SERVER_URL="$pr_domain" \
            -e VERCEL_GIT_COMMIT_REF="$branch_name" \
            -b VERCEL_GIT_COMMIT_REF="$branch_name" \
            -m githubCommitRef="$branch_name" \
          )
          echo "preview_url=$preview_url" >> $GITHUB_OUTPUT

      - name: Alias pr deploy
        id: alias
        run: |
          commit_url=${{ steps.deploy.outputs.preview_url }}
          pr_domain=${{ needs.build_app.outputs.vercel_domain }}
          vercel alias set $commit_url $pr_domain --token=${{ env.VERCEL_TOKEN }} --scope=graveflex

      - name: Comment on Pull Request with URLs
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ env.GH_TOKEN }}
          header: Deployment URLs
          message: |
            | PR URL | Stories | DB Branch |
            |--------|---------|-----------|
            | [Link :rocket:](https://${{ needs.build_app.outputs.vercel_domain }}) | [Link](https://${{ needs.build_app.outputs.vercel_domain }}/stories/index.html) | [Link :elephant:](https://console.neon.tech/app/projects/${{ env.NEON_PROJECT_ID }}/branches/${{ steps.create-branch.outputs.branch_id }}) |
  lighthouse:
    runs-on: ubuntu-latest
    needs: [build_app, deploy-preview]
    steps:
      - uses: actions/checkout@v4

      - name: Audit URLs using Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://${{ needs.build_app.outputs.vercel_domain }}/refract/without-data
            https://${{ needs.build_app.outputs.vercel_domain }}/refract/with-theme-and-data-and-image
            https://${{ needs.build_app.outputs.vercel_domain }}/refract/with-theme-and-data-and-payload-image
            https://${{ needs.build_app.outputs.vercel_domain }}/refract/with-dynamic-import
            https://${{ needs.build_app.outputs.vercel_domain }}/
            https://${{ needs.build_app.outputs.vercel_domain }}/kitchen-sink
          budgetPath: ./budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true
          runs: 1

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const results = ${{ steps.lighthouse_audit.outputs.manifest }};
            const score = res => res >= 90 ? 'ðŸŸ¢' : (res) >= 50 ? 'ðŸŸ ' : 'ðŸ”´';
            const formatResult = (res) => Math.round((res * 100));
            const links = ${{ steps.lighthouse_audit.outputs.links }};

            const header = "### Lighthouse Audit";
            const heading   = '| Route | Performance | Accessibility | Best Practices | SEO | Full Report |';
            const separator = '|-------|-------------|---------------|----------------|-----|-------------|';

            const entries = results.map((item, i) => {
              const result = item.summary;
              Object.keys(result).forEach(key => result[key] = formatResult(result[key]));
              const url = item.url;
              const pathname = new URL(url).pathname;
              const fullReportUrl = links[url];

              const row = [
                `[${pathname}](${url})`,
                `${score(result.performance)} ${result.performance}`,
                `${score(result.accessibility)} ${result.accessibility}`,
                `${score(result['best-practices'])} ${result['best-practices']}`,
                `${score(result.seo)} ${result.seo}`,
                `[Full Report](${fullReportUrl})`
              ].join(' | ');

              return `| ${row} |`
            }).join('\n');

            const comment = [header, heading, separator, entries].join('\n')

            core.setOutput("comment", comment);

      - name: Add comment to PR
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: Lighthouse
          message: |
            ${{ steps.format_lighthouse_score.outputs.comment }}
