name: Build

on:
  workflow_call:
    outputs:
      database_url:
        description: "The pooled neon database connection URL"
        value: ${{ jobs.build.outputs.database_url }}
      database_url_unpooled:
        description: "The unpooled neon database connection URL"
        value: ${{ jobs.build.outputs.database_url_unpooled }}
      neon_branch:
        description: "The name of the neon database branch"
        value: ${{ jobs.build.outputs.neon_branch }}
      vercel_domain:
        description: "The branch domain for the vercel prod / staging / preview deploy"
        value: ${{ jobs.set_vercel_domain.outputs.vercel_domain }}

env:
  NEON_DATABASE_USERNAME: ${{ secrets.NEON_DATABASE_USERNAME }} # change this to your database username
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for commenting on pull requests for private repos
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }} # You can generate a an API key in your account settings
  NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }} # You can find this in your project settings
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  DOTENV_PRIVATE_KEY: ${{ secrets.DOTENV_PRIVATE_KEY_CI }}
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  TURBO_REMOTE_ONLY: true
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  setup:
    uses: ./.github/workflows/setup.yaml
    secrets: inherit

  lint:
    uses: ./.github/workflows/lint-and-test.yaml
    secrets: inherit
    needs: setup

  set_vercel_domain:
    uses: ./.github/workflows/get-vercel-domain.yaml
    secrets: inherit

  build_stories:
    if: github.ref != 'refs/heads/main'
    uses: ./.github/workflows/build-stories.yaml
    secrets: inherit
    needs: setup

  build:
    runs-on: ubuntu-latest
    needs: [set_vercel_domain, setup]
    outputs:
      database_url: ${{ steps.migrate.outputs.database_url }}
      database_url_unpooled: ${{ steps.migrate.outputs.database_url_unpooled }}
      neon_branch: ${{ env.NEON_BRANCH }}
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install

      - name: Link Vercel App
        run: ./node_modules/.bin/vercel link --yes --project ${{ vars.VERCEL_PROJECT_NAME }} --token=${{ env.VERCEL_TOKEN }} --scope=${{ vars.VERCEL_ORG }}

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: |
            .env.local
            .vercel
            apps/web/.next
          key: ${{ runner.os }}-vercel-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vercel-

      - name: Pull Vercel Environment Information
        run: |
          branch_name=${{ steps.branch-name.outputs.current_branch }}
          if [ "$branch_name" = "main" ]; then
            environment="--environment=production"
          else
            environment="--environment=preview --git-branch=$branch_name"
          fi

          ./node_modules/.bin/vercel pull --yes $environment --token=${{ env.VERCEL_TOKEN }} --scope=${{ vars.VERCEL_ORG }}

      - name: Set Neon Branch Name
        run: |
          branch_name=${{ steps.branch-name.outputs.current_branch }}
          if [ "$branch_name" = "staging" ] || [ "$branch_name" = "main" ] || [ "$branch_name" = "development" ]; then
            echo "NEON_BRANCH=${branch_name}" >> "$GITHUB_ENV"
          else
            echo "NEON_BRANCH=preview/pr-${{ github.event.number }}-${branch_name}" >> "$GITHUB_ENV"
          fi

      - name: Create Neon Branch
        id: create_branch
        uses: neondatabase/create-branch-action@v4
        with:
          project_id: ${{ env.NEON_PROJECT_ID }}
          # parent: dev # optional (defaults to your primary branch)
          branch_name: ${{ env.NEON_BRANCH }}
          username: ${{ env.NEON_DATABASE_USERNAME }}
          api_key: ${{ env.NEON_API_KEY }}

      - name: Run Migrations
        id: migrate
        run: |
            touch .env.local

            database_url="${{ steps.create_branch.outputs.db_url_with_pooler }}?sslmode=require"
            database_url_unpooled="${{ steps.create_branch.outputs.db_url }}?sslmode=require"
            pr_domain=${{ needs.set_vercel_domain.outputs.vercel_domain }}

            echo "database_url=$database_url" >> "$GITHUB_OUTPUT"
            echo "database_url_unpooled=$database_url_unpooled" >> "$GITHUB_OUTPUT"

            echo DATABASE_URL=$database_url >> .env.local
            echo DATABASE_URL_UNPOOLED=$database_url_unpooled >> .env.local
            echo SERVER_URL=$pr_domain >> .env.local

            pnpm db:migrate

      - name: Build Project Artifacts
        run: |
          branch_name=${{ steps.branch-name.outputs.current_branch }}
          if [ "$branch_name" = "main" ]; then
            target="--prod"
          else
            target="--target=preview"
          fi
          pnpm env:dev -- vercel build --token=${{ env.VERCEL_TOKEN }} --scope=${{ vars.VERCEL_ORG }} $target
