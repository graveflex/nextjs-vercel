# for PR deploys
name: Generate PR Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
  NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
  NEON_BASE_URL: ${{ secrets.NEON_BASE_URL }}
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  create-sync-database:
    runs-on: ubuntu-latest

    if: |
      (startsWith(github.head_ref, 'chore/') ||
      startsWith(github.head_ref, 'docs/') ||
      startsWith(github.head_ref, 'feat/') ||
      startsWith(github.head_ref, 'fix/') ||
      startsWith(github.head_ref, 'perf/') ||
      startsWith(github.head_ref, 'refactor/') ||
      startsWith(github.head_ref, 'revert/') ||
      startsWith(github.head_ref, 'style/') ||
      startsWith(github.head_ref, 'test/')) &&
      github.event.action == 'opened'
    steps:
      - uses: actions/checkout@v4
      - name: Setup PostgreSQL
        uses: tj-actions/install-postgresql@v3
        with:
          postgresql-version: 15
      - name: Determine Base DB
        id: set-base-db
        run: |
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          if [[ $BASE_BRANCH == develop ]]
          then
            BASE_DB_URL=${{ secrets.MAIN_DB_URL }} || ""
          elif [[ $BASE_BRANCH == preprod ]]
          then
            BASE_DB_URL=${{ secrets.MAIN_DB_URL }} || ""
          elif [[ $BASE_BRANCH == main ]]
          then
            BASE_DB_URL=${{ secrets.MAIN_DB_URL }}
          else
            BASE_URL="${BASE_BRANCH/\//%2F}"
            echo "BASE_URL: ${BASE_URL}"
            BASE_DB_URL="${{ secrets.NEON_BASE_URL }}/${BASE_URL}"
          fi

          echo "BASE_DB_URL=${BASE_DB_URL}" >> "$GITHUB_ENV"
      - name: Create DB
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          CURRENT_URL="${BRANCH_NAME/\//%2F}"
          CURRENT_DB_URL="${{ secrets.NEON_BASE_URL }}/${CURRENT_URL}"

          echo "CURRENT_DB_URL=${CURRENT_DB_URL}" >> "$GITHUB_ENV"
          npx neonctl databases create --project-id='${{ secrets.NEON_PROJECT_ID }}' --branch=main --name=${BRANCH_NAME} --api-key='${{ secrets.NEON_API_KEY }}'
      - name: Copy DB
        run: |
          pg_dump -Fc -v -d ${{ env.BASE_DB_URL }} | pg_restore -v -d "${{ env.CURRENT_DB_URL }}?sslmode=require"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: create-sync-database
    if: |
      (startsWith(github.head_ref, 'chore/') ||
      startsWith(github.head_ref, 'docs/') ||
      startsWith(github.head_ref, 'feat/') ||
      startsWith(github.head_ref, 'fix/') ||
      startsWith(github.head_ref, 'perf/') ||
      startsWith(github.head_ref, 'refactor/') ||
      startsWith(github.head_ref, 'revert/') ||
      startsWith(github.head_ref, 'style/') ||
      startsWith(github.head_ref, 'test/'))
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: 18.0.0

      - name: Get DB URL
        run: |
          CURRENT_BRANCH=${{ github.event.pull_request.head.ref }}
          CURRENT_DB_URL="${{ secrets.NEON_BASE_URL }}/${CURRENT_BRANCH}"

          echo "CURRENT_DB_URL=$CURRENT_DB_URL" >> "$GITHUB_ENV"
      - name: Pull env vars from Vercel
        run: |
          echo "Init pull"
          npx vercel --token="${{ secrets.VERCEL_TOKEN }}" pull --yes --environment=development
          echo "Env vars"
          npx vercel --token="${{ secrets.VERCEL_TOKEN }}" --scope graveflex env pull --yes --environment=development .env
      - name: Run Build
        run: |
          POSTGRES_URL=${{ env.CURRENT_DB_URL }} npx vercel --token=${{ secrets.VERCEL_TOKEN }} build
      - name: Deploy
        run: |
          POSTGRES_URL=${{ env.CURRENT_DB_URL }} npx vercel --token=${{ secrets.VERCEL_TOKEN }} deploy --prebuilt
